{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthServiceService = /*#__PURE__*/(() => {\n  class AuthServiceService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem(\"currentUser\")));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(username, password) {\n      // post to fake back end, this url will be handled there...\n      return this.http.post(`/users/authenticate`, {\n        username,\n        password\n      }).pipe(map(user => {\n        // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\n        user.authdata = window.btoa(username + \":\" + password);\n        localStorage.setItem(\"currentUser\", JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage to log user out\n      localStorage.removeItem(\"currentUser\");\n      this.currentUserSubject.next(null);\n    }\n\n  }\n\n  AuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n    return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServiceService,\n    factory: AuthServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}