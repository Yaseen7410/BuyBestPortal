{"ast":null,"code":"import { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthServiceService } from 'src/BestBuyPortal-Api/Services/auth-service.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/BestBuyPortal-Api/Services/auth-service.service\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, route, router, authenticationService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.authenticationService = authenticationService;\n      this.loading = false;\n      this.submitted = false;\n      this.returnUrl = ''; // redirect to home if already logged in\n\n      if (this.authenticationService.currentUserValue) {\n        this.router.navigate(['/home']);\n      }\n    }\n\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        name: ['', [Validators.required, Validators.name]],\n        password: ['', Validators.required]\n      }); // get return url from route parameters or default to '/'\n\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    } // convenience getter for easy access to form fields\n\n\n    get f() {\n      return this.loginForm.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true;\n      debugger;\n\n      if (this.loginForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.authenticationService.login(this.f.name.value, this.f.password.value).pipe(first()).subscribe(data => {\n        debugger;\n\n        if (data.succeeded) {\n          this.loading = false;\n          location.reload(); //this.success();\n          // this.successMessage = data.lists;\n\n          console.log(this.successMessage);\n          this.router.navigateByUrl('/home');\n        } else {\n          console.log(data.errors);\n          this.errorMessage = data.errors;\n          this.loading = false;\n          this.router.navigateByUrl('/login');\n        } //  this.errorMessage = localStorage.getItem('currentUser');\n        //  splitString(this.errorMessage);\n        // alert(this.errorMessage);\n\n      }, error => {\n        this.router.navigateByUrl('/login');\n        this.loading = false;\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthServiceService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 21,\n    vars: 1,\n    consts: [[1, \"text-center\", 3, \"formGroup\", \"ngSubmit\"], [1, \"my-card\"], [1, \"my-form\"], [1, \"full-width\", \"form-group\"], [\"matInput\", \"\", \"placeholder\", \"name\", \"formControlName\", \"name\", \"name\", \"name\", \"required\", \"\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"required\", \"\"], [1, \"form-group\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(1, \"mat-toolbar\");\n        i0.ɵɵelementStart(2, \"mat-card\", 1);\n        i0.ɵɵelementStart(3, \"mat-card-content\");\n        i0.ɵɵelementStart(4, \"form\", 2);\n        i0.ɵɵelementStart(5, \"h2\");\n        i0.ɵɵtext(6, \"LOGIN\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵelementStart(8, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"mat-card-actions\");\n        i0.ɵɵelementStart(19, \"button\", 7);\n        i0.ɵɵtext(20, \"LOGIN\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i4.MatToolbar, i5.MatCard, i5.MatCardContent, i1.NgForm, i6.MatFormField, i6.MatLabel, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i5.MatCardActions, i8.MatButton],\n    encapsulation: 2\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}