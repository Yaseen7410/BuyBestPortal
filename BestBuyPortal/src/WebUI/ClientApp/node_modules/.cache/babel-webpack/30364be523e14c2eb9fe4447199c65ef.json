{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AccountClient } from 'src/BestBuyPortal-Api/bestBuy-api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/BestBuyPortal-Api/bestBuy-api\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/button\";\n\nfunction RegisterComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter your address. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegisterComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password must contain at least one special character, one number, one uppercase letter, one lowercase letter, and be 6 to 50 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(empClient, route) {\n      this.empClient = empClient;\n      this.route = route;\n    }\n\n    ngOnInit() {\n      this.registrationForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(10), Validators.pattern(/^(?=.*[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n        address: ['', Validators.required]\n      });\n    }\n\n    Register() {\n      this.empClient.registerRequest({\n        name: this.registrationForm.name,\n        email: this.registrationForm.email,\n        address: this.registrationForm.address,\n        password: this.registrationForm.password\n      }).subscribe(response => {\n        console.log(response);\n      });\n    }\n\n    onEmailInput(event) {\n      const email = event.target.value;\n      const dotComIndex = email.indexOf('.com');\n\n      if (dotComIndex !== -1 && email.length > dotComIndex + 4) {\n        event.target.value = email.slice(0, dotComIndex + 4);\n        this.registrationForm.controls.email.setValue(event.target.value);\n      }\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountClient), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 19,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [\"matInput\", \"\", \"placeholder\", \"Name\", \"name\", \"Name\", \"formControlName\", \"name\", \"required\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Email\", \"name\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 3, \"ngModel\", \"input\", \"ngModelChange\"], [\"matInput\", \"\", \"placeholder\", \"Address\", \"name\", \"address\", \"formControlName\", \"address\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵtext(2, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-form-field\");\n        i0.ɵɵelement(4, \"input\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"mat-form-field\");\n        i0.ɵɵelementStart(7, \"input\", 2);\n        i0.ɵɵlistener(\"input\", function RegisterComponent_Template_input_input_7_listener($event) {\n          return ctx.onEmailInput($event);\n        })(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.registrationForm.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelementStart(9, \"mat-form-field\");\n        i0.ɵɵelement(10, \"textarea\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, RegisterComponent_mat_error_11_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"mat-form-field\");\n        i0.ɵɵelement(14, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, RegisterComponent_mat_error_15_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵelementStart(17, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_17_listener() {\n          return ctx.Register();\n        });\n        i0.ɵɵtext(18, \" Register \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.registrationForm.email);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.registrationForm.controls.address.invalid && ctx.registrationForm.controls.address.touched);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.registrationForm.controls.password.invalid && ctx.registrationForm.controls.password.touched);\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i5.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator, i6.NgIf, i7.MatButton, i4.MatError],\n    styles: [\"\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}