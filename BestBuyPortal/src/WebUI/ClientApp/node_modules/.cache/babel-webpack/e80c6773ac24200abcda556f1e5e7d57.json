{"ast":null,"code":"import { AccountClient } from '../bestBuy-api';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../bestBuy-api\";\nexport let AuthServiceService = /*#__PURE__*/(() => {\n  class AuthServiceService {\n    constructor(http, empClient) {\n      this.http = http;\n      this.empClient = empClient;\n      this.isAuthenticated = false;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(name, password) {\n      return this.empClient.loginRequest({\n        enamemail,\n        password\n      }).pipe(map(user => {\n        debugger;\n        console.log(user);\n\n        if (user.succeeded == true) {\n          const role = user.lists.role;\n          const token = user.lists.token;\n          const name = user.lists.name;\n          const email = user.lists.email; // localStorage.setItem('token', token );\n\n          localStorage.setItem('role', role);\n          localStorage.setItem('email', email);\n          localStorage.setItem('name', name);\n          localStorage.setItem('currentUser', JSON.stringify(user.lists.token)); // localStorage.setItem('currentUser', JSON.stringify(user.lists.role));\n\n          this.currentUserSubject.next(user);\n        }\n\n        return user;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage to log user out\n      this.logouttoast();\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      localStorage.removeItem('name');\n      localStorage.removeItem('email');\n      this.currentUserSubject.next(null);\n    }\n\n    logouttoast() {//this.toastr.error('User Logedout Successfully');\n    }\n\n    isAuthenticatedUser() {\n      debugger;\n\n      if (this.currentUser) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n  }\n\n  AuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n    return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AccountClient));\n  };\n\n  AuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServiceService,\n    factory: AuthServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}